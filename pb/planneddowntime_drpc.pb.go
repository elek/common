// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.21
// source: planneddowntime.proto

package pb

import (
	bytes "bytes"
	context "context"
	errors "errors"

	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"

	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_planneddowntime_proto struct{}

func (drpcEncoding_File_planneddowntime_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_planneddowntime_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_planneddowntime_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_planneddowntime_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCPlannedDowntimeClient interface {
	DRPCConn() drpc.Conn

	GetAvailable(ctx context.Context, in *Timeframe) (*Available, error)
	ScheduleDowntime(ctx context.Context, in *Timeframe) (*ScheduleDowntimeResponse, error)
}

type drpcPlannedDowntimeClient struct {
	cc drpc.Conn
}

func NewDRPCPlannedDowntimeClient(cc drpc.Conn) DRPCPlannedDowntimeClient {
	return &drpcPlannedDowntimeClient{cc}
}

func (c *drpcPlannedDowntimeClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcPlannedDowntimeClient) GetAvailable(ctx context.Context, in *Timeframe) (*Available, error) {
	out := new(Available)
	err := c.cc.Invoke(ctx, "/planneddowntime.PlannedDowntime/GetAvailable", drpcEncoding_File_planneddowntime_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPlannedDowntimeClient) ScheduleDowntime(ctx context.Context, in *Timeframe) (*ScheduleDowntimeResponse, error) {
	out := new(ScheduleDowntimeResponse)
	err := c.cc.Invoke(ctx, "/planneddowntime.PlannedDowntime/ScheduleDowntime", drpcEncoding_File_planneddowntime_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCPlannedDowntimeServer interface {
	GetAvailable(context.Context, *Timeframe) (*Available, error)
	ScheduleDowntime(context.Context, *Timeframe) (*ScheduleDowntimeResponse, error)
}

type DRPCPlannedDowntimeUnimplementedServer struct{}

func (s *DRPCPlannedDowntimeUnimplementedServer) GetAvailable(context.Context, *Timeframe) (*Available, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCPlannedDowntimeUnimplementedServer) ScheduleDowntime(context.Context, *Timeframe) (*ScheduleDowntimeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

type DRPCPlannedDowntimeDescription struct{}

func (DRPCPlannedDowntimeDescription) NumMethods() int { return 2 }

func (DRPCPlannedDowntimeDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/planneddowntime.PlannedDowntime/GetAvailable", drpcEncoding_File_planneddowntime_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPlannedDowntimeServer).
					GetAvailable(
						ctx,
						in1.(*Timeframe),
					)
			}, DRPCPlannedDowntimeServer.GetAvailable, true
	case 1:
		return "/planneddowntime.PlannedDowntime/ScheduleDowntime", drpcEncoding_File_planneddowntime_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPlannedDowntimeServer).
					ScheduleDowntime(
						ctx,
						in1.(*Timeframe),
					)
			}, DRPCPlannedDowntimeServer.ScheduleDowntime, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterPlannedDowntime(mux drpc.Mux, impl DRPCPlannedDowntimeServer) error {
	return mux.Register(impl, DRPCPlannedDowntimeDescription{})
}

type DRPCPlannedDowntime_GetAvailableStream interface {
	drpc.Stream
	SendAndClose(*Available) error
}

type drpcPlannedDowntime_GetAvailableStream struct {
	drpc.Stream
}

func (x *drpcPlannedDowntime_GetAvailableStream) SendAndClose(m *Available) error {
	if err := x.MsgSend(m, drpcEncoding_File_planneddowntime_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPlannedDowntime_ScheduleDowntimeStream interface {
	drpc.Stream
	SendAndClose(*ScheduleDowntimeResponse) error
}

type drpcPlannedDowntime_ScheduleDowntimeStream struct {
	drpc.Stream
}

func (x *drpcPlannedDowntime_ScheduleDowntimeStream) SendAndClose(m *ScheduleDowntimeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_planneddowntime_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
