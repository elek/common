// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: orders.proto

package pb

import (
	fmt "fmt"
	math "math"
	time "time"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PieceAction is an enumeration of all possible executed actions on storage node.
type PieceAction int32

const (
	PieceAction_INVALID           PieceAction = 0
	PieceAction_PUT               PieceAction = 1
	PieceAction_GET               PieceAction = 2
	PieceAction_GET_AUDIT         PieceAction = 3
	PieceAction_GET_REPAIR        PieceAction = 4
	PieceAction_PUT_REPAIR        PieceAction = 5
	PieceAction_DELETE            PieceAction = 6
	PieceAction_PUT_GRACEFUL_EXIT PieceAction = 7
)

var PieceAction_name = map[int32]string{
	0: "INVALID",
	1: "PUT",
	2: "GET",
	3: "GET_AUDIT",
	4: "GET_REPAIR",
	5: "PUT_REPAIR",
	6: "DELETE",
	7: "PUT_GRACEFUL_EXIT",
}

var PieceAction_value = map[string]int32{
	"INVALID":           0,
	"PUT":               1,
	"GET":               2,
	"GET_AUDIT":         3,
	"GET_REPAIR":        4,
	"PUT_REPAIR":        5,
	"DELETE":            6,
	"PUT_GRACEFUL_EXIT": 7,
}

func (x PieceAction) String() string {
	return proto.EnumName(PieceAction_name, int32(x))
}

func (PieceAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{0}
}

// PieceHashAlgorithm defines how the hashes of the pieces are calculated.
type PieceHashAlgorithm int32

const (
	PieceHashAlgorithm_SHA256 PieceHashAlgorithm = 0
	PieceHashAlgorithm_XXH3   PieceHashAlgorithm = 1
	PieceHashAlgorithm_BLAKE3 PieceHashAlgorithm = 2
)

var PieceHashAlgorithm_name = map[int32]string{
	0: "SHA256",
	1: "XXH3",
	2: "BLAKE3",
}

var PieceHashAlgorithm_value = map[string]int32{
	"SHA256": 0,
	"XXH3":   1,
	"BLAKE3": 2,
}

func (x PieceHashAlgorithm) String() string {
	return proto.EnumName(PieceHashAlgorithm_name, int32(x))
}

func (PieceHashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{1}
}

type SettlementWithWindowResponse_Status int32

const (
	SettlementWithWindowResponse_ACCEPTED SettlementWithWindowResponse_Status = 0
	SettlementWithWindowResponse_REJECTED SettlementWithWindowResponse_Status = 1
)

var SettlementWithWindowResponse_Status_name = map[int32]string{
	0: "ACCEPTED",
	1: "REJECTED",
}

var SettlementWithWindowResponse_Status_value = map[string]int32{
	"ACCEPTED": 0,
	"REJECTED": 1,
}

func (x SettlementWithWindowResponse_Status) String() string {
	return proto.EnumName(SettlementWithWindowResponse_Status_name, int32(x))
}

func (SettlementWithWindowResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{7, 0}
}

// OrderLimit is provided by satellite to execute specific action on storage node within some limits.
type OrderLimit struct {
	// unique serial to avoid replay attacks
	SerialNumber SerialNumber `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3,customtype=SerialNumber" json:"serial_number"`
	// satellite who issued this order limit allowing orderer to do the specified action
	SatelliteId NodeID `protobuf:"bytes,2,opt,name=satellite_id,json=satelliteId,proto3,customtype=NodeID" json:"satellite_id"`
	// uplink who requested or whom behalf the order limit to do an action
	DeprecatedUplinkId *NodeID `protobuf:"bytes,3,opt,name=deprecated_uplink_id,json=deprecatedUplinkId,proto3,customtype=NodeID" json:"deprecated_uplink_id,omitempty"`
	// public key that will be used to sign orders and piece hash
	UplinkPublicKey PiecePublicKey `protobuf:"bytes,13,opt,name=uplink_public_key,json=uplinkPublicKey,proto3,customtype=PiecePublicKey" json:"uplink_public_key"`
	// storage node who can re claimthe order limit specified by serial
	StorageNodeId NodeID `protobuf:"bytes,4,opt,name=storage_node_id,json=storageNodeId,proto3,customtype=NodeID" json:"storage_node_id"`
	// piece which is allowed to be touched
	PieceId PieceID `protobuf:"bytes,5,opt,name=piece_id,json=pieceId,proto3,customtype=PieceID" json:"piece_id"`
	// limit in bytes how much can be changed
	Limit                  int64       `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Action                 PieceAction `protobuf:"varint,7,opt,name=action,proto3,enum=orders.PieceAction" json:"action,omitempty"`
	PieceExpiration        time.Time   `protobuf:"bytes,8,opt,name=piece_expiration,json=pieceExpiration,proto3,stdtime" json:"piece_expiration"`
	OrderExpiration        time.Time   `protobuf:"bytes,9,opt,name=order_expiration,json=orderExpiration,proto3,stdtime" json:"order_expiration"`
	OrderCreation          time.Time   `protobuf:"bytes,12,opt,name=order_creation,json=orderCreation,proto3,stdtime" json:"order_creation"`
	EncryptedMetadataKeyId []byte      `protobuf:"bytes,14,opt,name=encrypted_metadata_key_id,json=encryptedMetadataKeyId,proto3" json:"encrypted_metadata_key_id,omitempty"`
	EncryptedMetadata      []byte      `protobuf:"bytes,15,opt,name=encrypted_metadata,json=encryptedMetadata,proto3" json:"encrypted_metadata,omitempty"`
	SatelliteSignature     []byte      `protobuf:"bytes,10,opt,name=satellite_signature,json=satelliteSignature,proto3" json:"satellite_signature,omitempty"`
	// this allows a storage node to find a satellite and handshake with it to get its key.
	DeprecatedSatelliteAddress *NodeAddress `protobuf:"bytes,11,opt,name=deprecated_satellite_address,json=deprecatedSatelliteAddress,proto3" json:"deprecated_satellite_address,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}     `json:"-"`
	XXX_unrecognized           []byte       `json:"-"`
	XXX_sizecache              int32        `json:"-"`
}

func (m *OrderLimit) Reset()         { *m = OrderLimit{} }
func (m *OrderLimit) String() string { return proto.CompactTextString(m) }
func (*OrderLimit) ProtoMessage()    {}
func (*OrderLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{0}
}
func (m *OrderLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderLimit.Unmarshal(m, b)
}
func (m *OrderLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderLimit.Marshal(b, m, deterministic)
}
func (m *OrderLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderLimit.Merge(m, src)
}
func (m *OrderLimit) XXX_Size() int {
	return xxx_messageInfo_OrderLimit.Size(m)
}
func (m *OrderLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderLimit.DiscardUnknown(m)
}

var xxx_messageInfo_OrderLimit proto.InternalMessageInfo

func (m *OrderLimit) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *OrderLimit) GetAction() PieceAction {
	if m != nil {
		return m.Action
	}
	return PieceAction_INVALID
}

func (m *OrderLimit) GetPieceExpiration() time.Time {
	if m != nil {
		return m.PieceExpiration
	}
	return time.Time{}
}

func (m *OrderLimit) GetOrderExpiration() time.Time {
	if m != nil {
		return m.OrderExpiration
	}
	return time.Time{}
}

func (m *OrderLimit) GetOrderCreation() time.Time {
	if m != nil {
		return m.OrderCreation
	}
	return time.Time{}
}

func (m *OrderLimit) GetEncryptedMetadataKeyId() []byte {
	if m != nil {
		return m.EncryptedMetadataKeyId
	}
	return nil
}

func (m *OrderLimit) GetEncryptedMetadata() []byte {
	if m != nil {
		return m.EncryptedMetadata
	}
	return nil
}

func (m *OrderLimit) GetSatelliteSignature() []byte {
	if m != nil {
		return m.SatelliteSignature
	}
	return nil
}

func (m *OrderLimit) GetDeprecatedSatelliteAddress() *NodeAddress {
	if m != nil {
		return m.DeprecatedSatelliteAddress
	}
	return nil
}

// OrderLimitSigning provides OrderLimit signing serialization.
//
// It is never used for sending across the network, it is
// used in signing to ensure that nullable=false fields get handled properly.
// Its purpose is to solidify the format of how we serialize for
// signing, to handle some backwards compatibility considerations.
type OrderLimitSigning struct {
	// unique serial to avoid replay attacks
	SerialNumber SerialNumber `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3,customtype=SerialNumber" json:"serial_number"`
	// satellite who issued this order limit allowing orderer to do the specified action
	SatelliteId NodeID `protobuf:"bytes,2,opt,name=satellite_id,json=satelliteId,proto3,customtype=NodeID" json:"satellite_id"`
	// uplink who requested or whom behalf the order limit to do an action
	DeprecatedUplinkId *NodeID `protobuf:"bytes,3,opt,name=deprecated_uplink_id,json=deprecatedUplinkId,proto3,customtype=NodeID" json:"deprecated_uplink_id,omitempty"`
	// public key that will be used to sign orders and piece hash
	UplinkPublicKey *PiecePublicKey `protobuf:"bytes,13,opt,name=uplink_public_key,json=uplinkPublicKey,proto3,customtype=PiecePublicKey" json:"uplink_public_key,omitempty"`
	// storage node who can re claimthe order limit specified by serial
	StorageNodeId NodeID `protobuf:"bytes,4,opt,name=storage_node_id,json=storageNodeId,proto3,customtype=NodeID" json:"storage_node_id"`
	// piece which is allowed to be touched
	PieceId PieceID `protobuf:"bytes,5,opt,name=piece_id,json=pieceId,proto3,customtype=PieceID" json:"piece_id"`
	// limit in bytes how much can be changed
	Limit                  int64       `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Action                 PieceAction `protobuf:"varint,7,opt,name=action,proto3,enum=orders.PieceAction" json:"action,omitempty"`
	PieceExpiration        *time.Time  `protobuf:"bytes,8,opt,name=piece_expiration,json=pieceExpiration,proto3,stdtime" json:"piece_expiration,omitempty"`
	OrderExpiration        *time.Time  `protobuf:"bytes,9,opt,name=order_expiration,json=orderExpiration,proto3,stdtime" json:"order_expiration,omitempty"`
	OrderCreation          *time.Time  `protobuf:"bytes,12,opt,name=order_creation,json=orderCreation,proto3,stdtime" json:"order_creation,omitempty"`
	EncryptedMetadataKeyId []byte      `protobuf:"bytes,14,opt,name=encrypted_metadata_key_id,json=encryptedMetadataKeyId,proto3" json:"encrypted_metadata_key_id,omitempty"`
	EncryptedMetadata      []byte      `protobuf:"bytes,15,opt,name=encrypted_metadata,json=encryptedMetadata,proto3" json:"encrypted_metadata,omitempty"`
	SatelliteSignature     []byte      `protobuf:"bytes,10,opt,name=satellite_signature,json=satelliteSignature,proto3" json:"satellite_signature,omitempty"`
	// this allows a storage node to find a satellite and handshake with it to get its key.
	DeprecatedSatelliteAddress *NodeAddress `protobuf:"bytes,11,opt,name=deprecated_satellite_address,json=deprecatedSatelliteAddress,proto3" json:"deprecated_satellite_address,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}     `json:"-"`
	XXX_unrecognized           []byte       `json:"-"`
	XXX_sizecache              int32        `json:"-"`
}

func (m *OrderLimitSigning) Reset()         { *m = OrderLimitSigning{} }
func (m *OrderLimitSigning) String() string { return proto.CompactTextString(m) }
func (*OrderLimitSigning) ProtoMessage()    {}
func (*OrderLimitSigning) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{1}
}
func (m *OrderLimitSigning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderLimitSigning.Unmarshal(m, b)
}
func (m *OrderLimitSigning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderLimitSigning.Marshal(b, m, deterministic)
}
func (m *OrderLimitSigning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderLimitSigning.Merge(m, src)
}
func (m *OrderLimitSigning) XXX_Size() int {
	return xxx_messageInfo_OrderLimitSigning.Size(m)
}
func (m *OrderLimitSigning) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderLimitSigning.DiscardUnknown(m)
}

var xxx_messageInfo_OrderLimitSigning proto.InternalMessageInfo

func (m *OrderLimitSigning) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *OrderLimitSigning) GetAction() PieceAction {
	if m != nil {
		return m.Action
	}
	return PieceAction_INVALID
}

func (m *OrderLimitSigning) GetPieceExpiration() *time.Time {
	if m != nil {
		return m.PieceExpiration
	}
	return nil
}

func (m *OrderLimitSigning) GetOrderExpiration() *time.Time {
	if m != nil {
		return m.OrderExpiration
	}
	return nil
}

func (m *OrderLimitSigning) GetOrderCreation() *time.Time {
	if m != nil {
		return m.OrderCreation
	}
	return nil
}

func (m *OrderLimitSigning) GetEncryptedMetadataKeyId() []byte {
	if m != nil {
		return m.EncryptedMetadataKeyId
	}
	return nil
}

func (m *OrderLimitSigning) GetEncryptedMetadata() []byte {
	if m != nil {
		return m.EncryptedMetadata
	}
	return nil
}

func (m *OrderLimitSigning) GetSatelliteSignature() []byte {
	if m != nil {
		return m.SatelliteSignature
	}
	return nil
}

func (m *OrderLimitSigning) GetDeprecatedSatelliteAddress() *NodeAddress {
	if m != nil {
		return m.DeprecatedSatelliteAddress
	}
	return nil
}

// Order is a one step of fullfilling Amount number of bytes from an OrderLimit with SerialNumber.
type Order struct {
	// serial of the order limit that was signed
	SerialNumber SerialNumber `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3,customtype=SerialNumber" json:"serial_number"`
	// amount to be signed for
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// signature
	UplinkSignature      []byte   `protobuf:"bytes,3,opt,name=uplink_signature,json=uplinkSignature,proto3" json:"uplink_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{2}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Order) GetUplinkSignature() []byte {
	if m != nil {
		return m.UplinkSignature
	}
	return nil
}

// OrderSigning provides Order signing format.
//
// It is never used for sending across the network, it is
// used in signing to ensure that nullable=false fields get handled properly.
// Its purpose is to solidify the format of how we serialize for
// signing, to handle some backwards compatibility considerations.
type OrderSigning struct {
	// serial of the order limit that was signed
	SerialNumber SerialNumber `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3,customtype=SerialNumber" json:"serial_number"`
	// amount to be signed for
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// signature
	UplinkSignature      []byte   `protobuf:"bytes,3,opt,name=uplink_signature,json=uplinkSignature,proto3" json:"uplink_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderSigning) Reset()         { *m = OrderSigning{} }
func (m *OrderSigning) String() string { return proto.CompactTextString(m) }
func (*OrderSigning) ProtoMessage()    {}
func (*OrderSigning) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{3}
}
func (m *OrderSigning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderSigning.Unmarshal(m, b)
}
func (m *OrderSigning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderSigning.Marshal(b, m, deterministic)
}
func (m *OrderSigning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderSigning.Merge(m, src)
}
func (m *OrderSigning) XXX_Size() int {
	return xxx_messageInfo_OrderSigning.Size(m)
}
func (m *OrderSigning) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderSigning.DiscardUnknown(m)
}

var xxx_messageInfo_OrderSigning proto.InternalMessageInfo

func (m *OrderSigning) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OrderSigning) GetUplinkSignature() []byte {
	if m != nil {
		return m.UplinkSignature
	}
	return nil
}

type PieceHash struct {
	// piece id
	PieceId PieceID `protobuf:"bytes,1,opt,name=piece_id,json=pieceId,proto3,customtype=PieceID" json:"piece_id"`
	// hash of the piece that was/is uploaded
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// size of uploaded piece
	PieceSize int64 `protobuf:"varint,4,opt,name=piece_size,json=pieceSize,proto3" json:"piece_size,omitempty"`
	// timestamp when upload occurred
	Timestamp time.Time `protobuf:"bytes,5,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	// signature either satellite or storage node
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// hash algorithm used
	HashAlgorithm        PieceHashAlgorithm `protobuf:"varint,6,opt,name=hash_algorithm,json=hashAlgorithm,proto3,enum=orders.PieceHashAlgorithm" json:"hash_algorithm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PieceHash) Reset()         { *m = PieceHash{} }
func (m *PieceHash) String() string { return proto.CompactTextString(m) }
func (*PieceHash) ProtoMessage()    {}
func (*PieceHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{4}
}
func (m *PieceHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceHash.Unmarshal(m, b)
}
func (m *PieceHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceHash.Marshal(b, m, deterministic)
}
func (m *PieceHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceHash.Merge(m, src)
}
func (m *PieceHash) XXX_Size() int {
	return xxx_messageInfo_PieceHash.Size(m)
}
func (m *PieceHash) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceHash.DiscardUnknown(m)
}

var xxx_messageInfo_PieceHash proto.InternalMessageInfo

func (m *PieceHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PieceHash) GetPieceSize() int64 {
	if m != nil {
		return m.PieceSize
	}
	return 0
}

func (m *PieceHash) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *PieceHash) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PieceHash) GetHashAlgorithm() PieceHashAlgorithm {
	if m != nil {
		return m.HashAlgorithm
	}
	return PieceHashAlgorithm_SHA256
}

// PieceHashSigning provides piece hash signing format.
//
// It is never used for sending across the network, it is
// used in signing to ensure that nullable=false fields get handled properly.
// Its purpose is to solidify the format of how we serialize for
// signing, to handle some backwards compatibility considerations.
type PieceHashSigning struct {
	// piece id
	PieceId PieceID `protobuf:"bytes,1,opt,name=piece_id,json=pieceId,proto3,customtype=PieceID" json:"piece_id"`
	// hash of the piece that was/is uploaded
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// size of uploaded piece
	PieceSize int64 `protobuf:"varint,4,opt,name=piece_size,json=pieceSize,proto3" json:"piece_size,omitempty"`
	// timestamp when upload occurred
	Timestamp *time.Time `protobuf:"bytes,5,opt,name=timestamp,proto3,stdtime" json:"timestamp,omitempty"`
	// signature either satellite or storage node
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// hash algorithm used
	HashAlgorithm        PieceHashAlgorithm `protobuf:"varint,6,opt,name=hash_algorithm,json=hashAlgorithm,proto3,enum=orders.PieceHashAlgorithm" json:"hash_algorithm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PieceHashSigning) Reset()         { *m = PieceHashSigning{} }
func (m *PieceHashSigning) String() string { return proto.CompactTextString(m) }
func (*PieceHashSigning) ProtoMessage()    {}
func (*PieceHashSigning) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{5}
}
func (m *PieceHashSigning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PieceHashSigning.Unmarshal(m, b)
}
func (m *PieceHashSigning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PieceHashSigning.Marshal(b, m, deterministic)
}
func (m *PieceHashSigning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PieceHashSigning.Merge(m, src)
}
func (m *PieceHashSigning) XXX_Size() int {
	return xxx_messageInfo_PieceHashSigning.Size(m)
}
func (m *PieceHashSigning) XXX_DiscardUnknown() {
	xxx_messageInfo_PieceHashSigning.DiscardUnknown(m)
}

var xxx_messageInfo_PieceHashSigning proto.InternalMessageInfo

func (m *PieceHashSigning) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PieceHashSigning) GetPieceSize() int64 {
	if m != nil {
		return m.PieceSize
	}
	return 0
}

func (m *PieceHashSigning) GetTimestamp() *time.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *PieceHashSigning) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PieceHashSigning) GetHashAlgorithm() PieceHashAlgorithm {
	if m != nil {
		return m.HashAlgorithm
	}
	return PieceHashAlgorithm_SHA256
}

// Expected order of messages from storagenode:
//   go repeated
//      SettlementRequest -> (async)
//   go repeated
//      <- SettlementResponse
type SettlementRequest struct {
	Limit                *OrderLimit `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Order                *Order      `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SettlementRequest) Reset()         { *m = SettlementRequest{} }
func (m *SettlementRequest) String() string { return proto.CompactTextString(m) }
func (*SettlementRequest) ProtoMessage()    {}
func (*SettlementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{6}
}
func (m *SettlementRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlementRequest.Unmarshal(m, b)
}
func (m *SettlementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlementRequest.Marshal(b, m, deterministic)
}
func (m *SettlementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlementRequest.Merge(m, src)
}
func (m *SettlementRequest) XXX_Size() int {
	return xxx_messageInfo_SettlementRequest.Size(m)
}
func (m *SettlementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SettlementRequest proto.InternalMessageInfo

func (m *SettlementRequest) GetLimit() *OrderLimit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *SettlementRequest) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

// SettlementWithWindowResponse returns the status and the amounts
// settled summed by piece action.
// Accepted status means that the orders were successfully processed
// (or they were previously processed)
// Rejected status means that the orders were previously processed and
// the summed settled amounts don't match
type SettlementWithWindowResponse struct {
	Status               SettlementWithWindowResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=orders.SettlementWithWindowResponse_Status" json:"status,omitempty"`
	ActionSettled        map[int32]int64                     `protobuf:"bytes,2,rep,name=action_settled,json=actionSettled,proto3" json:"action_settled,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *SettlementWithWindowResponse) Reset()         { *m = SettlementWithWindowResponse{} }
func (m *SettlementWithWindowResponse) String() string { return proto.CompactTextString(m) }
func (*SettlementWithWindowResponse) ProtoMessage()    {}
func (*SettlementWithWindowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f5d4cf0fc9e41b, []int{7}
}
func (m *SettlementWithWindowResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlementWithWindowResponse.Unmarshal(m, b)
}
func (m *SettlementWithWindowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlementWithWindowResponse.Marshal(b, m, deterministic)
}
func (m *SettlementWithWindowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlementWithWindowResponse.Merge(m, src)
}
func (m *SettlementWithWindowResponse) XXX_Size() int {
	return xxx_messageInfo_SettlementWithWindowResponse.Size(m)
}
func (m *SettlementWithWindowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlementWithWindowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SettlementWithWindowResponse proto.InternalMessageInfo

func (m *SettlementWithWindowResponse) GetStatus() SettlementWithWindowResponse_Status {
	if m != nil {
		return m.Status
	}
	return SettlementWithWindowResponse_ACCEPTED
}

func (m *SettlementWithWindowResponse) GetActionSettled() map[int32]int64 {
	if m != nil {
		return m.ActionSettled
	}
	return nil
}

func init() {
	proto.RegisterEnum("orders.PieceAction", PieceAction_name, PieceAction_value)
	proto.RegisterEnum("orders.PieceHashAlgorithm", PieceHashAlgorithm_name, PieceHashAlgorithm_value)
	proto.RegisterEnum("orders.SettlementWithWindowResponse_Status", SettlementWithWindowResponse_Status_name, SettlementWithWindowResponse_Status_value)
	proto.RegisterType((*OrderLimit)(nil), "orders.OrderLimit")
	proto.RegisterType((*OrderLimitSigning)(nil), "orders.OrderLimitSigning")
	proto.RegisterType((*Order)(nil), "orders.Order")
	proto.RegisterType((*OrderSigning)(nil), "orders.OrderSigning")
	proto.RegisterType((*PieceHash)(nil), "orders.PieceHash")
	proto.RegisterType((*PieceHashSigning)(nil), "orders.PieceHashSigning")
	proto.RegisterType((*SettlementRequest)(nil), "orders.SettlementRequest")
	proto.RegisterType((*SettlementWithWindowResponse)(nil), "orders.SettlementWithWindowResponse")
	proto.RegisterMapType((map[int32]int64)(nil), "orders.SettlementWithWindowResponse.ActionSettledEntry")
}

func init() { proto.RegisterFile("orders.proto", fileDescriptor_e0f5d4cf0fc9e41b) }

var fileDescriptor_e0f5d4cf0fc9e41b = []byte{
	// 1074 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc7, 0xeb, 0x7c, 0x38, 0xcd, 0xc9, 0x47, 0x9d, 0xb3, 0xa5, 0xca, 0x46, 0x45, 0xad, 0xc2,
	0x5e, 0x84, 0xae, 0x48, 0x45, 0x2a, 0x0a, 0x8b, 0xd0, 0x8a, 0x24, 0x35, 0xad, 0x49, 0xe9, 0x46,
	0x93, 0x94, 0xad, 0x40, 0x22, 0x72, 0xe2, 0x21, 0x31, 0x9b, 0xd8, 0xc1, 0x9e, 0x00, 0xdd, 0x0b,
	0x2e, 0x90, 0xb8, 0x43, 0x02, 0xf1, 0x1a, 0xbc, 0x08, 0xcf, 0xc0, 0xc5, 0xf2, 0x1c, 0xdc, 0xa1,
	0x39, 0xb6, 0x93, 0x94, 0x16, 0x68, 0xcb, 0x82, 0x04, 0xe2, 0xce, 0x67, 0xce, 0xf9, 0x9d, 0x99,
	0x39, 0x67, 0xfe, 0x33, 0x86, 0xac, 0xeb, 0x59, 0xdc, 0xf3, 0xab, 0x53, 0xcf, 0x15, 0x2e, 0xaa,
	0x81, 0x55, 0x82, 0xa1, 0x3b, 0x74, 0x83, 0xb1, 0xd2, 0xd6, 0xd0, 0x75, 0x87, 0x63, 0xbe, 0x4b,
	0x56, 0x7f, 0xf6, 0xf1, 0xae, 0xb0, 0x27, 0xdc, 0x17, 0xe6, 0x64, 0x1a, 0x06, 0x80, 0xe3, 0x5a,
	0x3c, 0xf8, 0x2e, 0x7f, 0x95, 0x02, 0x78, 0x24, 0x73, 0x1c, 0xdb, 0x13, 0x5b, 0xe0, 0x03, 0xc8,
	0xf9, 0xdc, 0xb3, 0xcd, 0x71, 0xcf, 0x99, 0x4d, 0xfa, 0xdc, 0x2b, 0x2a, 0xdb, 0x4a, 0x25, 0xdb,
	0x58, 0xff, 0xf1, 0xd9, 0xd6, 0xca, 0x4f, 0xcf, 0xb6, 0xb2, 0x1d, 0x72, 0x9e, 0x90, 0x8f, 0x65,
	0xfd, 0x25, 0x0b, 0x5f, 0x85, 0xac, 0x6f, 0x0a, 0x3e, 0x1e, 0xdb, 0x82, 0xf7, 0x6c, 0xab, 0x18,
	0x23, 0x32, 0x1f, 0x92, 0xea, 0x89, 0x6b, 0x71, 0xe3, 0x80, 0x65, 0xe6, 0x31, 0x86, 0x85, 0x6f,
	0xc1, 0xba, 0xc5, 0xa7, 0x1e, 0x1f, 0x98, 0x82, 0x5b, 0xbd, 0xd9, 0x74, 0x6c, 0x3b, 0x4f, 0x24,
	0x1a, 0x27, 0x14, 0x96, 0x30, 0x5c, 0xc4, 0x9d, 0x52, 0x98, 0x61, 0x61, 0x03, 0x0a, 0x21, 0x32,
	0x9d, 0xf5, 0xc7, 0xf6, 0xa0, 0xf7, 0x84, 0x9f, 0x17, 0x73, 0x84, 0x6e, 0x84, 0xb3, 0xe6, 0xdb,
	0x36, 0x1f, 0xf0, 0x36, 0xb9, 0x5b, 0xfc, 0x9c, 0xad, 0x05, 0xc0, 0x7c, 0x00, 0xf7, 0x61, 0xcd,
	0x17, 0xae, 0x67, 0x0e, 0x79, 0x4f, 0x16, 0x45, 0x4e, 0x9e, 0xb8, 0x72, 0xdd, 0xb9, 0x30, 0x8c,
	0x4c, 0x0b, 0x77, 0x60, 0x75, 0x2a, 0x53, 0x4b, 0x20, 0x49, 0xc0, 0x5a, 0x08, 0xa4, 0x68, 0x4a,
	0xe3, 0x80, 0xa5, 0x28, 0xc0, 0xb0, 0x70, 0x1d, 0x92, 0x63, 0x59, 0xdc, 0xa2, 0xba, 0xad, 0x54,
	0xe2, 0x2c, 0x30, 0xf0, 0x3e, 0xa8, 0xe6, 0x40, 0xd8, 0xae, 0x53, 0x4c, 0x6d, 0x2b, 0x95, 0x7c,
	0xed, 0x4e, 0x35, 0x6c, 0x2c, 0xf1, 0x75, 0x72, 0xb1, 0x30, 0x04, 0x1f, 0x81, 0x16, 0x4c, 0xc7,
	0xbf, 0x98, 0xda, 0x9e, 0x49, 0xd8, 0xea, 0xb6, 0x52, 0xc9, 0xd4, 0x4a, 0xd5, 0xa0, 0xdb, 0xd5,
	0xa8, 0xdb, 0xd5, 0x6e, 0xd4, 0xed, 0xc6, 0xaa, 0x5c, 0xd2, 0x77, 0x3f, 0x6f, 0x29, 0x6c, 0x8d,
	0x68, 0x7d, 0x0e, 0xcb, 0x84, 0x34, 0xdd, 0x72, 0xc2, 0xf4, 0x4d, 0x12, 0x12, 0xbd, 0x94, 0xb0,
	0x05, 0xf9, 0x20, 0xe1, 0xc0, 0xe3, 0x41, 0xba, 0xec, 0x0d, 0xd2, 0xe5, 0x88, 0x6d, 0x86, 0x28,
	0x3e, 0x80, 0xbb, 0xdc, 0x19, 0x78, 0xe7, 0x53, 0x79, 0x2c, 0x26, 0x5c, 0x98, 0x96, 0x29, 0x4c,
	0xd9, 0x5e, 0x59, 0xee, 0xbc, 0x2c, 0x37, 0xdb, 0x98, 0x07, 0xbc, 0x17, 0xfa, 0x5b, 0xfc, 0xdc,
	0xb0, 0xf0, 0x15, 0xc0, 0xcb, 0x68, 0x71, 0x8d, 0x98, 0xc2, 0x25, 0x06, 0x77, 0xe1, 0xce, 0xe2,
	0xd0, 0xfa, 0xf6, 0xd0, 0x31, 0xc5, 0xcc, 0xe3, 0x45, 0xa0, 0x78, 0x9c, 0xbb, 0x3a, 0x91, 0x07,
	0x3b, 0xb0, 0xb9, 0x74, 0x64, 0x17, 0xac, 0x69, 0x59, 0x1e, 0xf7, 0xfd, 0x62, 0x86, 0x76, 0x5d,
	0xa8, 0x92, 0xc4, 0xe4, 0x61, 0xa9, 0x07, 0x0e, 0x56, 0x5a, 0x60, 0x9d, 0x88, 0x0a, 0x7d, 0xe5,
	0x5f, 0x54, 0x28, 0x2c, 0x44, 0x28, 0x27, 0xb3, 0x9d, 0xe1, 0xbf, 0x4a, 0x8b, 0x0f, 0x7f, 0x5f,
	0x8b, 0xf8, 0x1f, 0xd2, 0x61, 0xeb, 0x56, 0x3a, 0x4c, 0x5c, 0xad, 0xc1, 0xd6, 0xad, 0x34, 0x98,
	0xb8, 0x5a, 0x7f, 0x87, 0xb7, 0xd0, 0x5f, 0xe2, 0x7f, 0xed, 0xf9, 0xe5, 0xaf, 0x15, 0x48, 0x92,
	0xf6, 0xfe, 0x8a, 0xde, 0x36, 0x40, 0x35, 0x27, 0xee, 0xcc, 0x11, 0xa4, 0xb4, 0x38, 0x0b, 0x2d,
	0x7c, 0x19, 0xb4, 0x50, 0x16, 0x8b, 0xfd, 0x91, 0xa0, 0x22, 0x05, 0xcc, 0x37, 0x57, 0xfe, 0x46,
	0x81, 0x2c, 0xad, 0xe3, 0x39, 0xc8, 0xff, 0x39, 0x2c, 0xe7, 0xdb, 0x18, 0xa4, 0x49, 0x01, 0x47,
	0xa6, 0x3f, 0xba, 0x20, 0x33, 0xe5, 0x4f, 0x64, 0x86, 0x90, 0x18, 0x99, 0xfe, 0x28, 0xb8, 0x73,
	0x18, 0x7d, 0xe3, 0x8b, 0x00, 0x01, 0xef, 0xdb, 0x4f, 0x39, 0x29, 0x3b, 0xce, 0xd2, 0x34, 0xd2,
	0xb1, 0x9f, 0x72, 0x6c, 0x40, 0x7a, 0xfe, 0x8f, 0x42, 0x32, 0xbe, 0xee, 0xbb, 0xb1, 0xc0, 0x70,
	0x13, 0xd2, 0xbf, 0xdd, 0xd4, 0x62, 0x00, 0xeb, 0x90, 0x97, 0x0b, 0xe9, 0x99, 0xe3, 0xa1, 0xeb,
	0xd9, 0x62, 0x34, 0xa1, 0x4b, 0x20, 0x5f, 0x2b, 0x5d, 0x50, 0xbb, 0xdc, 0x6b, 0x3d, 0x8a, 0x60,
	0xb9, 0xd1, 0xb2, 0x59, 0xfe, 0x3e, 0x06, 0xda, 0x3c, 0x2a, 0x6a, 0xd2, 0xdf, 0x5c, 0x98, 0x87,
	0x37, 0x2b, 0x4c, 0xe2, 0x1f, 0x2f, 0x4a, 0x1f, 0x0a, 0x1d, 0x2e, 0xc4, 0x98, 0x4f, 0xb8, 0x23,
	0x18, 0xff, 0x74, 0xc6, 0x7d, 0x81, 0x95, 0xe8, 0xa2, 0x55, 0x68, 0xc5, 0x18, 0xa5, 0x5b, 0x3c,
	0x71, 0xd1, 0xe5, 0xfb, 0x12, 0x24, 0xc9, 0x47, 0x35, 0xc9, 0xd4, 0x72, 0x17, 0x22, 0x59, 0xe0,
	0x2b, 0xff, 0x10, 0x83, 0xcd, 0xc5, 0x24, 0x8f, 0x6d, 0x31, 0x7a, 0x6c, 0x3b, 0x96, 0xfb, 0x39,
	0xe3, 0xfe, 0xd4, 0x75, 0x7c, 0x8e, 0x4d, 0x50, 0x7d, 0x61, 0x8a, 0x99, 0x4f, 0x13, 0xe6, 0x6b,
	0xf7, 0xa3, 0x34, 0x7f, 0x44, 0x55, 0x3b, 0x84, 0xb0, 0x10, 0xc5, 0x8f, 0x20, 0x1f, 0x5c, 0xf2,
	0x3d, 0x9f, 0x28, 0xf9, 0x68, 0xc6, 0x2b, 0x99, 0xda, 0xeb, 0xd7, 0x4a, 0x16, 0xbc, 0x13, 0x41,
	0x88, 0xa5, 0x3b, 0xc2, 0x3b, 0x67, 0x39, 0x73, 0x79, 0xac, 0xf4, 0x36, 0xe0, 0xe5, 0x20, 0xd4,
	0x20, 0x2e, 0x5f, 0x4a, 0xb9, 0xee, 0x24, 0x93, 0x9f, 0xf2, 0x95, 0xfa, 0xcc, 0x1c, 0xcf, 0x78,
	0x28, 0xdd, 0xc0, 0x78, 0x33, 0xf6, 0x86, 0x52, 0xbe, 0x07, 0x6a, 0xb0, 0x66, 0xcc, 0xc2, 0x6a,
	0xbd, 0xd9, 0xd4, 0xdb, 0x5d, 0xfd, 0x40, 0x5b, 0x91, 0x16, 0xd3, 0xdf, 0xd5, 0x9b, 0xd2, 0x52,
	0x76, 0xbe, 0x84, 0xcc, 0xd2, 0xcb, 0x85, 0x19, 0x48, 0x19, 0x27, 0xef, 0xd7, 0x8f, 0x0d, 0x19,
	0x99, 0x82, 0x78, 0xfb, 0xb4, 0xab, 0x29, 0xf2, 0xe3, 0x50, 0xef, 0x6a, 0x31, 0xcc, 0x41, 0xfa,
	0x50, 0xef, 0xf6, 0xea, 0xa7, 0x07, 0x46, 0x57, 0x8b, 0x63, 0x1e, 0x40, 0x9a, 0x4c, 0x6f, 0xd7,
	0x0d, 0xa6, 0x25, 0xa4, 0xdd, 0x3e, 0x9d, 0xdb, 0x49, 0x04, 0x50, 0x0f, 0xf4, 0x63, 0xbd, 0xab,
	0x6b, 0x2a, 0xbe, 0x00, 0x05, 0xe9, 0x3b, 0x64, 0xf5, 0xa6, 0xfe, 0xce, 0xe9, 0x71, 0x4f, 0x3f,
	0x33, 0xba, 0x5a, 0x6a, 0x67, 0x1f, 0xf0, 0xf2, 0xb1, 0x91, 0x60, 0xe7, 0xa8, 0x5e, 0x7b, 0x6d,
	0x5f, 0x5b, 0xc1, 0x55, 0x48, 0x9c, 0x9d, 0x1d, 0xed, 0x69, 0x8a, 0x1c, 0x6d, 0x1c, 0xd7, 0x5b,
	0xfa, 0x9e, 0x16, 0xab, 0x71, 0x50, 0xa9, 0xeb, 0x3e, 0x7e, 0x08, 0xeb, 0x57, 0xd5, 0x1a, 0xef,
	0x5e, 0xee, 0x44, 0x78, 0xe2, 0x4a, 0xf7, 0xae, 0xd3, 0xa4, 0xf2, 0x4a, 0x45, 0x69, 0xac, 0x7f,
	0x80, 0xf2, 0x0f, 0xe2, 0x93, 0xaa, 0xed, 0xee, 0x0e, 0xdc, 0xc9, 0xc4, 0x75, 0x76, 0xa7, 0xfd,
	0xbe, 0x4a, 0x62, 0xda, 0xfb, 0x35, 0x00, 0x00, 0xff, 0xff, 0x74, 0x98, 0xbb, 0xf6, 0x5d, 0x0d,
	0x00, 0x00,
}
