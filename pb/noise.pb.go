// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noise.proto

package pb

import (
	fmt "fmt"
	math "math"
	time "time"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NoiseProtocol represents the handshake pattern and cipher suite.
type NoiseProtocol int32

const (
	NoiseProtocol_NOISE_UNSET                       NoiseProtocol = 0
	NoiseProtocol_NOISE_IK_25519_CHACHAPOLY_BLAKE2B NoiseProtocol = 1
	NoiseProtocol_NOISE_IK_25519_AESGCM_BLAKE2B     NoiseProtocol = 2
)

var NoiseProtocol_name = map[int32]string{
	0: "NOISE_UNSET",
	1: "NOISE_IK_25519_CHACHAPOLY_BLAKE2B",
	2: "NOISE_IK_25519_AESGCM_BLAKE2B",
}

var NoiseProtocol_value = map[string]int32{
	"NOISE_UNSET":                       0,
	"NOISE_IK_25519_CHACHAPOLY_BLAKE2B": 1,
	"NOISE_IK_25519_AESGCM_BLAKE2B":     2,
}

func (x NoiseProtocol) String() string {
	return proto.EnumName(NoiseProtocol_name, int32(x))
}

func (NoiseProtocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_14d195bf72570c49, []int{0}
}

// NoiseInfo represents the information an initiator needs to connect over Noise
// to a specific peer.
type NoiseInfo struct {
	Proto                NoiseProtocol `protobuf:"varint,1,opt,name=proto,proto3,enum=noise.NoiseProtocol" json:"proto,omitempty"`
	PublicKey            []byte        `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NoiseInfo) Reset()         { *m = NoiseInfo{} }
func (m *NoiseInfo) String() string { return proto.CompactTextString(m) }
func (*NoiseInfo) ProtoMessage()    {}
func (*NoiseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_14d195bf72570c49, []int{0}
}
func (m *NoiseInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoiseInfo.Unmarshal(m, b)
}
func (m *NoiseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoiseInfo.Marshal(b, m, deterministic)
}
func (m *NoiseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoiseInfo.Merge(m, src)
}
func (m *NoiseInfo) XXX_Size() int {
	return xxx_messageInfo_NoiseInfo.Size(m)
}
func (m *NoiseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NoiseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NoiseInfo proto.InternalMessageInfo

func (m *NoiseInfo) GetProto() NoiseProtocol {
	if m != nil {
		return m.Proto
	}
	return NoiseProtocol_NOISE_UNSET
}

func (m *NoiseInfo) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

// NoiseKeyAttestation is a structure that shows the given Noise public key
// belongs to a specific node id. The Noise public key (and signing timestamp)
// are signed by the leaf key of the node's cert chain, where the node's cert
// chain is validated to belong to the given node id.
// Note that a NoiseSessionAttestation is preferred to a NoiseKeyAttestation
// if possible, and required if you are interested in channel binding.
// NoiseKeyAttestation, on the other hand, doubles as a more secure form of
// NoiseInfo.
type NoiseKeyAttestation struct {
	NodeId        NodeID        `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3,customtype=NodeID" json:"node_id"`
	NodeCertchain []byte        `protobuf:"bytes,2,opt,name=node_certchain,json=nodeCertchain,proto3" json:"node_certchain,omitempty"`
	NoiseProto    NoiseProtocol `protobuf:"varint,3,opt,name=noise_proto,json=noiseProto,proto3,enum=noise.NoiseProtocol" json:"noise_proto,omitempty"`
	// these two values are part of the signature.
	NoisePublicKey       []byte    `protobuf:"bytes,4,opt,name=noise_public_key,json=noisePublicKey,proto3" json:"noise_public_key,omitempty"`
	Timestamp            time.Time `protobuf:"bytes,5,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Signature            []byte    `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NoiseKeyAttestation) Reset()         { *m = NoiseKeyAttestation{} }
func (m *NoiseKeyAttestation) String() string { return proto.CompactTextString(m) }
func (*NoiseKeyAttestation) ProtoMessage()    {}
func (*NoiseKeyAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_14d195bf72570c49, []int{1}
}
func (m *NoiseKeyAttestation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoiseKeyAttestation.Unmarshal(m, b)
}
func (m *NoiseKeyAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoiseKeyAttestation.Marshal(b, m, deterministic)
}
func (m *NoiseKeyAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoiseKeyAttestation.Merge(m, src)
}
func (m *NoiseKeyAttestation) XXX_Size() int {
	return xxx_messageInfo_NoiseKeyAttestation.Size(m)
}
func (m *NoiseKeyAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_NoiseKeyAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_NoiseKeyAttestation proto.InternalMessageInfo

func (m *NoiseKeyAttestation) GetNodeCertchain() []byte {
	if m != nil {
		return m.NodeCertchain
	}
	return nil
}

func (m *NoiseKeyAttestation) GetNoiseProto() NoiseProtocol {
	if m != nil {
		return m.NoiseProto
	}
	return NoiseProtocol_NOISE_UNSET
}

func (m *NoiseKeyAttestation) GetNoisePublicKey() []byte {
	if m != nil {
		return m.NoisePublicKey
	}
	return nil
}

func (m *NoiseKeyAttestation) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *NoiseKeyAttestation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// NoiseSessionAttestation is a structure that shows the given Noise session
// handshake hash is in use by a specific node id. The handshake hash is signed
// by the leaf key of the node's cert chain, where the node's cert chain is
// validated to belong to the given node id.
type NoiseSessionAttestation struct {
	NodeId               NodeID   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3,customtype=NodeID" json:"node_id"`
	NodeCertchain        []byte   `protobuf:"bytes,2,opt,name=node_certchain,json=nodeCertchain,proto3" json:"node_certchain,omitempty"`
	NoiseHandshakeHash   []byte   `protobuf:"bytes,3,opt,name=noise_handshake_hash,json=noiseHandshakeHash,proto3" json:"noise_handshake_hash,omitempty"`
	Signature            []byte   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoiseSessionAttestation) Reset()         { *m = NoiseSessionAttestation{} }
func (m *NoiseSessionAttestation) String() string { return proto.CompactTextString(m) }
func (*NoiseSessionAttestation) ProtoMessage()    {}
func (*NoiseSessionAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_14d195bf72570c49, []int{2}
}
func (m *NoiseSessionAttestation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoiseSessionAttestation.Unmarshal(m, b)
}
func (m *NoiseSessionAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoiseSessionAttestation.Marshal(b, m, deterministic)
}
func (m *NoiseSessionAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoiseSessionAttestation.Merge(m, src)
}
func (m *NoiseSessionAttestation) XXX_Size() int {
	return xxx_messageInfo_NoiseSessionAttestation.Size(m)
}
func (m *NoiseSessionAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_NoiseSessionAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_NoiseSessionAttestation proto.InternalMessageInfo

func (m *NoiseSessionAttestation) GetNodeCertchain() []byte {
	if m != nil {
		return m.NodeCertchain
	}
	return nil
}

func (m *NoiseSessionAttestation) GetNoiseHandshakeHash() []byte {
	if m != nil {
		return m.NoiseHandshakeHash
	}
	return nil
}

func (m *NoiseSessionAttestation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterEnum("noise.NoiseProtocol", NoiseProtocol_name, NoiseProtocol_value)
	proto.RegisterType((*NoiseInfo)(nil), "noise.NoiseInfo")
	proto.RegisterType((*NoiseKeyAttestation)(nil), "noise.NoiseKeyAttestation")
	proto.RegisterType((*NoiseSessionAttestation)(nil), "noise.NoiseSessionAttestation")
}

func init() { proto.RegisterFile("noise.proto", fileDescriptor_14d195bf72570c49) }

var fileDescriptor_14d195bf72570c49 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x91, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0x86, 0x63, 0x1a, 0x68, 0x19, 0x08, 0x45, 0x5b, 0xa4, 0x22, 0xd4, 0x08, 0x82, 0x14, 0x15,
	0xe5, 0x60, 0x5a, 0x2a, 0x0e, 0x3d, 0xda, 0x14, 0x15, 0x8b, 0x94, 0x44, 0x26, 0xad, 0xd4, 0x5e,
	0x2c, 0x63, 0x6f, 0xec, 0x4d, 0x60, 0xc7, 0xf2, 0x2e, 0x07, 0xde, 0xa2, 0x8f, 0xd1, 0x57, 0xe8,
	0x1b, 0xf4, 0x19, 0x7a, 0x48, 0x5f, 0xa5, 0xf2, 0x2e, 0x76, 0x94, 0x1c, 0x7a, 0xeb, 0xcd, 0xf3,
	0xcf, 0x3f, 0x3b, 0xff, 0x7c, 0x86, 0x1a, 0x47, 0x26, 0xa8, 0x99, 0xa4, 0x28, 0x91, 0x94, 0x55,
	0xd1, 0x81, 0x08, 0x23, 0xd4, 0x52, 0xa7, 0x1b, 0x21, 0x46, 0x6b, 0x3a, 0x54, 0xd5, 0x6a, 0x7b,
	0x3d, 0x94, 0x6c, 0x43, 0x85, 0xf4, 0x37, 0x89, 0x36, 0xf4, 0xbf, 0x40, 0x75, 0x91, 0x4d, 0x39,
	0xfc, 0x1a, 0xc9, 0x19, 0x94, 0x95, 0xda, 0x36, 0x7a, 0xc6, 0xa0, 0x31, 0x6a, 0x99, 0xfa, 0x75,
	0x65, 0xb8, 0xcc, 0x1a, 0x01, 0xae, 0x5d, 0x6d, 0x21, 0xc7, 0x00, 0xc9, 0x76, 0xb5, 0x66, 0x81,
	0x77, 0x4b, 0x77, 0xed, 0x52, 0xcf, 0x18, 0xd4, 0xdd, 0xaa, 0x56, 0xe6, 0x74, 0xd7, 0xff, 0x51,
	0x82, 0x17, 0x6a, 0x6e, 0x4e, 0x77, 0x96, 0x94, 0xd9, 0x4e, 0xc9, 0x90, 0x93, 0xd7, 0xf0, 0x94,
	0x63, 0x48, 0x3d, 0x16, 0xaa, 0x25, 0x75, 0xbb, 0xf1, 0xeb, 0xae, 0x7b, 0xf0, 0xfb, 0xae, 0x5b,
	0x59, 0x60, 0x48, 0x9d, 0x0f, 0x6e, 0x25, 0x6b, 0x3b, 0x21, 0x39, 0x85, 0x86, 0x32, 0x06, 0x34,
	0x95, 0x41, 0xec, 0x33, 0xbe, 0xdf, 0x71, 0x94, 0xa9, 0x93, 0x5c, 0x24, 0xe3, 0x3d, 0x02, 0x4f,
	0x07, 0x7f, 0xf2, 0x8f, 0xe0, 0xc0, 0x8b, 0x92, 0x0c, 0xa0, 0xb9, 0x1f, 0xbb, 0xbf, 0xe1, 0x50,
	0xbd, 0xdf, 0xd0, 0xae, 0xfc, 0x10, 0x62, 0x43, 0xb5, 0x60, 0xd6, 0x2e, 0xf7, 0x8c, 0x41, 0x6d,
	0xd4, 0x31, 0x35, 0x55, 0x33, 0xa7, 0x6a, 0x5e, 0xe5, 0x0e, 0xfb, 0x59, 0x76, 0xce, 0xf7, 0x3f,
	0x5d, 0xc3, 0xbd, 0x1f, 0x23, 0xaf, 0xa0, 0x2a, 0x58, 0xc4, 0x7d, 0xb9, 0x4d, 0x69, 0xbb, 0xa2,
	0x51, 0x15, 0x42, 0xff, 0xa7, 0x01, 0x2f, 0x55, 0xd2, 0x25, 0x15, 0x82, 0x21, 0xff, 0x9f, 0xb8,
	0xde, 0x40, 0x4b, 0xdf, 0x1d, 0xfb, 0x3c, 0x14, 0xb1, 0x7f, 0x9b, 0x7d, 0x89, 0x58, 0x71, 0xab,
	0xbb, 0x44, 0xf5, 0x66, 0x79, 0x6b, 0xe6, 0x8b, 0xf8, 0x61, 0xf6, 0xc3, 0x47, 0xd9, 0xcf, 0x6e,
	0xe0, 0xe8, 0x01, 0x64, 0xf2, 0x1c, 0x6a, 0x8b, 0x0b, 0x67, 0x39, 0xf5, 0x3e, 0x2f, 0x96, 0xd3,
	0xab, 0xe6, 0x01, 0x39, 0x85, 0x13, 0x2d, 0x38, 0x73, 0x6f, 0x34, 0x1e, 0xbf, 0x7d, 0xef, 0x4d,
	0x66, 0xd6, 0x64, 0x66, 0x5d, 0x5e, 0x9c, 0x7f, 0xf5, 0xec, 0x73, 0x6b, 0x3e, 0x1d, 0xd9, 0x4d,
	0x83, 0x9c, 0xc0, 0xf1, 0x23, 0x9b, 0x35, 0x5d, 0x7e, 0x9c, 0x7c, 0x2a, 0x2c, 0x25, 0xbb, 0xf5,
	0x8d, 0x08, 0x89, 0xe9, 0x8d, 0xc9, 0x70, 0x18, 0xe0, 0x66, 0x83, 0x7c, 0x98, 0xac, 0x56, 0x15,
	0xf5, 0x13, 0xde, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x56, 0x0e, 0xb0, 0x0a, 0x03, 0x00,
	0x00,
}
